- label: Guten Tag!
  href: ../gutentag.yaml
--- |

## Tags

The gutentags project provides the following building block tags, all of which
have very simple implementations that you can copy and modify for your needs.
They all have a mutable `value` property.

- `text.html` controls inline text
- `html.html` controls an inline block of HTML
- `repeat.html` repeats its argument
- `reveal.html` shows or hides its argument
- `switch.html` shows one of its argument tags

### text.html

A text tag controls a text node based on its `value` property.
The default text, if its value property is `null` or `undefined`, is the
innerText of the argument.

```html
<!doctype html>
<html>
    <head>
        <link rel="tag" href="gutentag/text.html">
    </head>
    <body>
        <text id="description">Beschreibung bevorstehende.</text>
    </body>
</html>
```

```js
text.value = "Guten Tag, Welt!";
```

Take a peek at essays/text.

### html.html

An HTML tag controls the HTML that appears at its position based on its `value`
property.
Like a text tag, the HTML tag does not introduce a wrapper element.
Note that `html` is a special tag in the HTML5 vocabulary, so this tag has to be
linked by an alternate tag name or used in XML.

```html
<!doctype html>
<html>
    <head>
        <link rel="tag" href="gutentag/html.html" as="x-html">
    </head>
    <body>
        <x-html id="description"></x-html>
    </body>
</html>
```

```js
html.value = "<b>Bold <i>and</b> italic</b></i>";
```

Take a peek at essays/html.

### repeat.html

Repeats its content based on the values in the given `value` array.

```html
<!doctype html>
<html>
    <head>
        <link rel="extends" href="./list">
        <link rel="tag" href="gutentag/repeat.html">
        <link rel="tag" href="gutentag/text.html">
    </head>
    <body>
        <ul><repeat id="items">
            <li id="item" type="a"><text id="text"></text></li>
        </repeat></ul>
    </body>
</html>
```

The repetition creates a scope for each of its iterations.
In that scope, the iteration object is accessible by a name constructed from the
id of the iteration, plus ":iteration".
The iteration object has an `index` and a `value` property.

```js
'use strict';
module.exports = List;
function List() {}
List.prototype.add = function (component, id, scope) {
    var components = scope.components;
    if (id === "items:iteration") {
        components.text.value = component.value;
    }
};
```

The repetition creates new iterations on demand and reacts to changes to the
given values array.

Take a peek at essays/repeat.

### reveal.html

Reveals its content based on whether `value` is truthy.

```html
<!doctype html>
<html>
    <head>
        <link rel="extends" href="./blink">
        <link rel="tag" href="gutentag/reveal.html">
        <meta accepts="[body]">
    </head>
    <body>
        <reveal id="content"><argument></argument></reveal>
    </body>
</html>
```html

```js
'use strict';
module.exports = Blink;
function Blink() {}
Blink.prototype.add = function (component, id) {
    if (id === "content") {
        setInterval(function () {
            component.value = !component.value;
        }, 1000);
    }
}
```

A `<reveal id="content">` tag instantiates its inner content in a
`content:revelation` scope each time it reveals that content.

Take a peek at essay/reveal.

### choose.html

Reveals one of its options, as expressed by named child tags, based on its
`value`.
Constructs the children on demand.

```html
<!doctype html>
<html>
    <head>
        <link rel="extends" href="./essay">
        <link rel="tag" href="../../choose.html">
        <link rel="tag" href="../../repeat.html">
        <link rel="tag" href="../../text.html">
    </head>
    <body>
        <repeat id="buttons">
            <button id="button">
                <text id="buttonLabel">â€”</text>
            </button>
        </repeat>
        <choose id="options">
            <a>Police</a>
            <b>Officer</b>
            <c>Wolves</c>
            <d>Old Witch</d>
            <e>Going to Sleep</e>
        </choose>
    </body>
</html>
```

```js
choose.value = "e";
```

A `<choose id="options">` tag instantiates one of its choices in a fresh scope
each time its value changes.
The name of that scope comes from the identifier of the component and the given
value, so the iteration would be called "options:e" in this case.

Take a peek at essays/choose.

### This

Components support self recursion. This is useful for creating trees.
The ``<this></this>`` tag stands for this component.

```html
<!doctype html>
<html>
    <head>
        <link rel="extends" href="./tree">
        <link rel="tag" href="../../text.html">
        <link rel="tag" href="../../repeat.html">
        <meta accepts="[body]">
    </head>
    <body>
        <argument></argument>
        <ul>
            <repeat id="children">
                <li><this id="child"><argument></argument></this></li>
            </repeat>
        </ul>
    </body>
</html>
```

### Space

Unlike normal HTML, by default, white space is treated as insignificant.
All text nodes are trimmed and thrown away if they only contain spaces.
However, there is a built in ``<sp>`` tag that explicitly marks parts of the
document where white space is significant.
In these regions, sequences of space are preserved.
In the following example, the string "Guten Tag, Welt!" is repeated for every
value of the greetings iteration.
The ``<sp>`` tag ensures that these greetings are delimited by space.

```html
<!doctype html>
<html>
    <head>
        <link rel="tag" href="../../repeat.html">
    </head>
    <body>
        <repeat id="greetings"><sp>Guten Tag, Welt! </sp></repeat>
    </body>
</html>
```

### XML

Gutentag supports XML for cases where the HTML5 parser gets in your way.
For example, the HTML5 parser does not allow a ``<repeat>`` tag to exist within
a ``<table>``. XML does.

```xml
<html>
    <head>
        <link rel="extends" href="./grid"/>
        <link rel="tag" href="gutentag/repeat.html"/>
        <link rel="tag" href="gutentag/text.html"/>
    </head>
    <body>
        <table>
            <thead>
                <tr id="columnRow">
                    <th></th>
                    <repeat id="columns">
                        <th><text id="ch"/></th>
                    </repeat>
                </tr>
            </thead>
            <tbody>
                <repeat id="rows">
                    <th><text id="rh"/></th>
                    <repeat id="cells">
                        <td><text id="cd"/></td>
                    </repeat>
                </repeat>
            </tbody>
        </table>
    </body>
</html>
```

