see:
- label: Guten Tag!
  href: ../gutentag.yaml
--- |

## Bootstrapping

Every Gutentag application starts with an npm package.
You will need a `package.json`.
Use `npm init` to create one.

You will also need copies of the module system and Gutentag installed locally.
Tags require a module system that can load these HTML modules.
The [System][] loader supports to-JavaScript translator modules.
During development, System supports loading modules installed by npm without a
build step, provided that the packages are compatible (no support for
directories with an implicit `index.js`) and that the modules have not been
deduped (with `npm dedupe`).

[System]: https://github.com/gutentags/system

```
$ npm init
$ npm install --save system
$ npm install --save koerper
$ npm install --save gutentag
```

To enable Mr to load Gutentag HTML or XML files, add a "translators" annotation
to `package.json`.

```json
{
  "translators": {
    "html": "gutentag/translate-html",
    "xml": "gutentag/translate-xml"
  }
}
```

A Gutentag application starts with a boilerplate `index.html`.
This HTML is suitable for debugging locally with your favorite web server.
Refreshing the page reloads all modules without incurring a build step.
You have the option of using this page as a loading screen if your application
takes a significant amount of time to load.
It also would host all of your metadata and assets like icons and CSS themes.

```html
<!doctype html>
<html>
    <head>
    </head>
    <body>
        <script src="node_modules/system/boot.js" data-import="./index"></script>
    </body>
</html>
```

The HTML calls into the Mr bootstrapping script which in turn loads the entry
module, `index.js`.
This boilerplate module just creates a virtual document, a root scope, and the
root component.

```js
var Document = require("koerper");
var Scope = require("gutentag/scope");
var App = require("app.html");

var scope = new Scope();
var document = new Document(window.document.body);
var app = new App(document.documentElement, scope);
```

To bundle up your modules for production, System also provides a tool called
Bundle, that operates like Browserify and generates a bundle.
Bundle translates all of the HTML modules into JavaScript and bundles a very
minimal module system.
You can add a build step to your package.json and run it with `npm run build`.

```
{
  "scripts": {
    "build": "bundle index.js | uglifyjs > bundle.js"
  }
}
```

For my debut Gutentag application, there is a [build script][BuildTengwar]
that rolls up the bundled HTML and CSS directly to a `gh-pages` branch, suitable
for pushing to Github.

[BuildTengwar]: https://github.com/gutentags/tengwar.html/blob/master/build-gh-pages.sh

