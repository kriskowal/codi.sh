slug: gutentag/custom
see:
- label: Guten Tag
  href: ../gutentag.yaml
--- |

# Custom tags

The gutentags project provides only the minimum building blocks to get your
project started, and establishes a convention for packaging your own tags.

If your package defines a single tag like `autocomplete.html`, name your package
`autocomplete.html` and define your main module as `index.html`.

```json
{
    "name": "autocomplete.html",
    "description": "An autocomplete guten tag",
    "version": "1.0.0",
    "main": "./index.html"
}
```

### Argument

Invoking a tag in another tag may use the content between the start and end tag
in various ways to pass an argument into the called tag.
Tags must express how they receive their argument.

-   ``<meta accepts="[body]">`` receive the entire argument as a component.
    The argument is instantiable in HTML tag definitions as the ``<argument>``
    tag.

    Use `caller.argument.component`, which is a component constructor.

-   ``<meta accepts="[entries]">`` receive each of the child nodes as a named
    argument component. The component constructor will receive an object with
    named properties for each component.

    Use `caller.argument.children`, which is an object mapping the name of the
    child tag to a component constructor.

-   ``<meta accepts="[text]">`` receives the entire argument as a string
    from its `innerText`.

    Use `caller.argument.innerText` to access the caller template's inner text.

-   ``<meta accepts="[html]">`` receives the entire argument as a string
    from its `innerHTML`.

    Use `caller.argument.innerHTML` to access the caller templates inner HTML.

For example, this tag parenthesizes its argument.

```html
<!doctype html>
<html>
    <head>
        <meta accepts="[body]">
    </head>
    <body>(<argument></argument>)</body>
</html>
```

The `caller.argument` object will also have a `tagName`.
In a future version, it may also support attributes and a language for matching
other DOM patterns.

