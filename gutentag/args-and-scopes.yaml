slug: gutentag/args-and-scopes
see:
- label: Guten Tag!
  href: ../gutentag.yaml
--- |

# Arguments and Scopes

The building block components, `<repeat>`, `<reveal>`, and `<choose>` all create
a child scope for the components instantiated by their inner template.
This has interesting implications for arguments instantiated within that scope.
Consider a `<list>` tag that contains a repetition and accepts an argument
component for each row.

```html
<!doctype html>
<html>
    <head>
        <link rel="extends" href="./list">
        <link rel="tag" href="gutentag/repeat.html">
        <meta accepts="[body]" as="row">
        <meta exports="rows:iteration" as="row">
    </head>
    <body>
        <ul><repeat id="rows">
            <li><row></row></li>
        </repeat></ul>
    </body>
</html>
```

Another component instantiates the list with a text component in each row.

```html
<!doctype html>
<html>
    <head>
        <link rel="extends" href="./essay">
        <link rel="tag" href="gutentag/text.html">
        <link rel="tag" href="./list.html">
    </head>
    <body>
        <list id="items">
            <text id="item"></text>
        </list>
    </body>
</html>
```

In the list component, each row is known as "rows:iteration".
However, the repetition also cuts through the transitive caller scopes
creating a new scope for instantiated arguments.
In this case, the list component creates an "items:row" iteration
based on the name of the caller ("items") and name exported by the list
("rows:iteration" gets exported as "row").

Thus, from within this essay, we observe the instantiation of "items:row" and
can see the value of the iteration.

```js
module.exports = Essay;
function Essay() {}
Essay.prototype.add = function (child, id, scope) {
    var components = scope.components;
    if (id === "items:row") {
        components.item.value = child.value;
    } else if (id === "this") {
        components.items.value = ["Guten Tag, Welt!", "Auf Widerseh'n, Welt!"];
    }
};
```

