slug: gutentag
see:
- label: Examples
  href: ./gutentag/examples.yaml
- label: Features of Tags
  href: ./gutentag/features.yaml
- label: Booting up Guten Tags
  href: ./gutentag/boot.yaml
- label: Built-in Tags
  href: ./gutentag/builtins.yaml
- label: Custom Tags
  href: ./gutentag/custom.yaml
- label: Arguments and Scopes
  href: ./gutentag/args-and-scopes.yaml
- label: XML
  href: ./gutentag/xml.yaml
- label: Module System
  href: ./system.yaml
--- |

# Guten Tag!

> *Guten Tag*, pronounced *goo'tn tock*, German for *Good day*, or in the
> hacker idiom, *Hello, World!*

The missing piece of the web component story is declarative modularity.
Web components presently have encapsulation through the shadow DOM, and a form
of modularity through script tags and register functions, but no inherent means
for declarative dependency.

Tags should be expressed as modules, written in HTML, with declarations for
dependency on other tags, and declarations for how they will receive argument
tags.
These declarations should be flexible enough to express all existing HTML5
tags.
The tag module should export a component constructor, and send and receive
component constructors as arguments.

Each tag should have a lexical scope, so one can trace a component by its
identifier by following parent tags until you encounter a scope that contains
that identifier.
The instance of a tag should never be in another file, except in the limited
sense of dynamic scoping through components *introduced* by other components,
like `repetition:iteration`, where `repetition` is the identifier of a
component in scope, and `iteration` is a component introduced into your scope
by that component.

A [guten tag][Guten Tag] is a module written in a variant of HTML that exports such a
constructor and can depend on other guten tags.
Guten Tag provides a `gutentag/translate-html` module that can translate
an HTML module to JavaScript, either on the fly during development in a
browser, or in Node.js to produce a script bundle.
Translator modules are supported by the [System module loader][System].

[Guten Tag]: https://github.com/gutentags/gutentag
[System]: https://github.com/gutentags/system

Guten tags rely upon a very thin, nearly transparent, virtual document that
serves to manipulate virtual "body" nodes to encapsulate components, without
necessarily introducing a container element.
Body nodes make it possible to give a component ownership over a region
of the actual document and make it easy for Guten Tag to add and remove these
regions.
A body's actual children are either captured in an orphan `<body>` element when
they are not on the actual document, or inserted before an empty text node when
they are on the actual document.
This is a service provided by the [Koerper][] module.

[Koerper]: https://github.com/gutentags/koerper

